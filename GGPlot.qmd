---
title: "GGPlot"
subtitle: "Version 1.1.3 - December 2024"
author: "Marco Torchiano"
format: 
  revealjs:
    slide-number: "c"
    css: revealslides.css
    logo: "images/hex-ggplot2.png"
    #theme: white
---

```{r setup, echo=FALSE, include=FALSE}
options(width = 55)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)

courses <- data.frame(
  code = c("15AHM","12BHD","16ACF",
           "01PNN", "01RKC","17AXO"),
  course= c("Chemistry","Computer science","Calculus I", 
            "Free Credits","Linear Algebra","Physics I"),
  semester = c(1L,1L,1L,2L,2L,2L),
  credits = c(8,8,10,6,10,10)
)

series <- data.frame(
  i = 1:10,
  linear = 1:10,
  fibonacci = c(1,1,2,3,5,8,13,21,34,55),
  square = (1:10)^2,
  log = log(1:10)
)

All_along_the_watchtower=paste(
'"There must be some way out of here," said the joker to the thief,',
'"There\'s too much confusion, I can\'t get no relief',
'Businessmen, they drink my wine, plowmen dig my earth',
'None of them along the line know what any of it is worth."',
'"No reason to get excited", the thief, he kindly spoke,',
'"There are many here among us who feel that life is but a joke',
'But you and I, we\'ve been through that, and this is not our fate',
'So let us not talk falsely now, the hour is getting late".',
'All along the watchtower, princes kept the view',
'While all the women came and went, barefoot servants, too.',
'Outside in the distance a wildcat did growl',
'Two riders were approaching, the wind began to howl.')

theme_set(theme_bw())
ggplot2::update_geom_defaults("point", list(color = "darkorange1"))
ggplot2::update_geom_defaults("line", list(color = "darkorange1"))
ggplot2::update_geom_defaults("bar", list(fill="moccasin",color="darkorange"))
ggplot2::update_geom_defaults("col", list(fill="moccasin",color="darkorange"))
ggplot2::update_geom_defaults("boxplot", list(fill="moccasin",color="darkorange"))
ggplot2::update_geom_defaults("violin", list(fill="moccasin",color="darkorange"))

```

## License ![](CC-BY-SA.png) {.smaller}

This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>.

-   You are free to:

    -   Share - copy and redistribute the material in any medium or format
    -   Adapt - remix, transform, and build upon the material

    for any purpose, even commercially.

    The licensor cannot revoke these freedoms as long as you follow the license terms.

-   Under the following terms:

    -   **Attribution** - You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.

    -   **ShareAlike** - If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.

# Introduction

The **`ggplot2`** is package for producing statistical graphics.

-   based on a grammar
    -   allows composing graphs as combination of components
-   hides fiddly details
    -   defaults let produce high-quality graphics in seconds
-   designed to work incrementally
    -   start with raw data, then add layers of annotations and statistical summaries

## Graphics Grammar

Plot is composed of:

-   **data** the information to be visualized (data frame)
-   **mapping** of data onto aesthetic attributes
    -   layer
        -   geometric elements (geom) or transformations (stat)
    -   scale: maps data to attributes (e.g., color, size ..)
    -   coord system: maps data coordinates to the plane
    -   facet: breaks up the plot as small multiples
    -   theme: provide support elements and controls details

## Basic elements

Any ggplot2 plot has three key components:

-   the data
-   aesthetic mappings
    -   maps data variables to aesthetics features
    -   coordinates or attributes
-   visual layer (at least one)
    -   define the visual object
    -   maps aesthetics features to geometric properties

## Basic elements

```{r basic elements}
#| fig.asp=2/4
ggplot(series, aes(x=i,y=fibonacci))+geom_point()
```

## Basic elements

```{r , ref.label="basic elements", eval=FALSE}
```

-   `series` : defines the data to be used
-   `aes(x=i,y=fibonacci)` : maps data to visual characteristics
    -   `i` and `fibonacci` to the *x* and *y* coordinates respectively
    -   cartesian coordinates are implied by default
    -   linear scales implied
-   `geom_point()` : defines a layer that maps data to points
    -   shape, color, size of points are implied by default

# Mappings

![](GGsteps.svg)

-   Scale depends on the type of aesthetics
    -   for position (x, y) is by default a simple linear scale
    -   for other types of aesthetics it may vary

## Scales and coordinates

Both scale and coordinates have (implicit) defaults:

-   the default scale depends on
    -   the specific aestethics
    -   the type of the variable
-   the default coordinate system is `coord_cartesian()`
    -   another option is `coor_polar()`

## Default scale adapts to variable

```{r}
#| fig.asp=2/4
ggplot(series, aes(x=factor(i),y=fibonacci))+geom_point()
```

A `factor` is mapped to equidistant slots along the axis

## Different coordinate system

```{r}
#| fig.asp=2/4
ggplot(series, aes(x=i,y=linear))+geom_point()+
      coord_polar()
```

`x` maps to $\theta$ (with `max(x)` $\rightarrow 2\pi$) and `y` maps to $\rho$

## Different y axis scale

```{r}
#| fig.asp=2/4
ggplot(series, aes(x=i,y=square))+geom_point()+
      scale_y_log10(minor_breaks=c(1:10,1:10*10))
```

Applied a log scale to the position `y`

## Additional aesthetics

Aesthetics include:

-   position (`x`, `y`)
-   grouping (`group`)
-   other:
    -   `color` : line or simbol color
    -   `fill` : area fill color
    -   `shape` : type of shape
    -   `size` : size of the object

## Additional aesthetics

```{r}
#| fig.asp=2/4
series$magf=series$fibonacci %/% 10
ggplot(series, aes(x=i, y=fibonacci, color=magf))+ geom_point()
```

A gradient scale is used for a continuous (`numeric`) variable

## Additional features

```{r}
#| fig.asp=2/4
ggplot(series, aes(x=i, y=fibonacci, color=factor(magf)))+ geom_point()
```

Discrete color scale is used for a `factor` variable

## Scales

For each aesthetics type a few scale functions are provided:

-   `scale_x_..`, `scale_y_..`
-   `scale_color_..`
-   `scale_fill_..`
-   `scale_shape_..`
-   `scale_size_..`

## Additional feature and scale

```{r}
#| fig.asp=2/4
ggplot(series, 
       aes(x=i, y=fibonacci, color=magf))+ 
       scale_color_gradient(low="blue",high="gold")+ 
       geom_point()
```

# Geometry layers

Geometry function add new layers

-   `geom_point()` : draw points
-   `geom_col()` : draw a bar/column
-   `geom_line()` : draw lines connecting positions
-   `geom_text()` and `geom_label()` : write a text or label
-   `geom_area()` : draw a filled area

Layers are drawn in order of declaration, with the latest on top.

The order of all other statements is irrelevant.

## Geometry col

```{r}
#| fig.asp=2/4
ggplot(series, aes(x=i, y=fibonacci))+ 
       geom_col()
```

## Geometry line

```{r}
#| fig.asp=2/4
ggplot(series, aes(x=i, y=fibonacci))+ 
       geom_line()
```

## Using multiple layers

```{r}
#| fig.asp=2/4
ggplot(series, aes(x=i, y=fibonacci, label=fibonacci))+ 
        geom_line() + geom_label()
```

## Using multiple layers

```{r}
#| fig.asp=2/4
ggplot(series, aes(x=i, y=fibonacci, label=fibonacci))+ 
        geom_label() + geom_line()
```

## Geometries with statistical transformation

A few geometries perform a transformation befor mapping to an object

-   `geom_bar()` : compute frequencies of discrete variables
-   `geom_histogram()` : compute frequencies of bins of continuous vars
-   `geom_boxplot()` : compute boxplot
-   `geom_violin()`: compute a violin plot

## Computing frequencies

```{r}
#| fig.asp=2/4
ch <- strsplit(str_to_lower(All_along_the_watchtower),"")[[1]]
ggplot(data.frame(chr=ch), aes(x=chr))+ geom_bar()
```

## Histogram geometry

```{r}
#| fig.asp=2/4
ggplot(series, aes(x=fibonacci))+ 
      geom_histogram(binwidth=1)
```

## Boxplot geometry

```{r}
#| fig.asp=2/4
ggplot(series, aes(x=fibonacci))+ 
      geom_boxplot()
```

## Violin geometry

```{r}
#| fig.asp=2/4
ggplot(series, aes(x=fibonacci,y=""))+ 
      geom_violin()
```

## Theme

The support elements and default visual features are defined by a theme

-   `theme_classic()` : similar to base functions
-   `theme_gray()` : the default theme (gray background)
-   `theme_bw()` : same as default but with white backgound
-   `theme_light()` : same as bw but with lighter lines
-   `theme_dark()` : dark gray background
-   `theme_minimal()` : minimalistic theme
-   `theme_void()` : no supporting elements

## Changing the theme

```{r}
#| fig.asp=2/4
ggplot(series, aes(x=factor(i),y=fibonacci))+geom_point()+
    theme_minimal()
```

The default theme can be changed with `theme_set()`.

## References

-   Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen. "ggplot2: Elegant Graphics for Data Analysis", in-progress
    -   <https://ggplot2-book.org/>
-   Winston Chang, "R Graphics Cookbook" O'Reilly, 2013
